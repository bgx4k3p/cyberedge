---
export const prerender = true;
import { getCollection } from 'astro:content';
import { getPermalink } from '~/utils/permalinks';

// 1. Extract all tags and convert to lowercase
const allPosts = await getCollection('post');
const allTags = allPosts.flatMap((post) => {
  const tags = post.data.tags || [];
  return tags.map((tag: string) => tag.toLowerCase());
});

// 2. Count tag frequency
const tagCounts: { [tag: string]: number } = {};
allTags.forEach((tag) => {
  tagCounts[tag] = (tagCounts[tag] || 0) + 1;
});

// 3. Find min and max counts
let minCount = Infinity;
let maxCount = -Infinity;
for (const tag in tagCounts) {
  const count = tagCounts[tag];
  minCount = Math.min(minCount, count);
  maxCount = Math.max(maxCount, count);
}

// Handle case where there are no tags or all tags have the same count
if (minCount === Infinity) minCount = 0; // No tags at all
if (maxCount === -Infinity) maxCount = 0;
if (maxCount === minCount) maxCount = minCount + 1; // Ensure a range even if counts are the same

// 4. Define Tailwind text sizes to use
const textSizes = ['text-sm', 'text-base', 'text-lg', 'text-xl', 'text-2xl', 'text-3xl', 'text-4xl', 'text-5xl'];

// 5. Dynamic function to determine Tailwind text size
function getTextSizeClassDynamic(count: number, minCount: number, maxCount: number, textSizes: string[]) {
  if (maxCount === minCount) {
    return 'text-sm';
  }

  const range = maxCount - minCount;
  const stepCount = textSizes.length - 1; // Number of steps between sizes
  const stepSize = range / stepCount;

  // Handle possible division by 0
  if (stepSize === 0) {
    return textSizes[0];
  }

  const index = Math.min(stepCount, Math.max(0, Math.round((count - minCount) / stepSize))); // Ensure index is within bounds
  return textSizes[index];
}

// 6. Sort tags

//const sortedTags = Object.entries(tagCounts).sort(([, countA], [, countB]) => countB - countA); // sort by frequency

const sortedTags = Object.entries(tagCounts).sort(([tagA], [tagB]) => {
  if (tagA < tagB) return -1;
  if (tagA > tagB) return 1;
  return 0;
}); // sort alphabetical
---

<div class="flex flex-wrap gap-2">
  {
    sortedTags.map(([tag, count]) => (
      <a
        href={getPermalink(`/tag/${tag}`)}
        class={`
                inline-flex items-center rounded-full bg-gray-200 px-3 py-1 font-semibold text-gray-700 hover:bg-gray-300 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700
                ${getTextSizeClassDynamic(count, minCount, maxCount, textSizes)}
            `}
      >
        {tag} <span class="ml-1 text-xs text-gray-500">{count}</span>
      </a>
    ))
  }
</div>
